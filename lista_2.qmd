# Lista 2 - GEE

## Introdu√ß√£o

```{r}
#| echo: false
#| message: false
#| warning: false
library(emmeans)   # C√°lculo de m√©dias estimadas ap√≥s an√°lises estat√≠sticas.
library(lme4)      # Ajuste de modelos lineares mistos.
library(nlme)      # Ajuste de modelos mistos n√£o lineares.
library(flexplot)  # Cria√ß√£o de gr√°ficos flex√≠veis e personalizados.
library(foreign)   # Importa√ß√£o/exporta√ß√£o de dados de outros formatos.
library(tidyr)     # Manipula√ß√£o de dados.
library(dplyr)     # Manipula√ß√£o e transforma√ß√£o de dados de maneira eficiente.
library(multcomp)  # Corre√ß√£o de m√∫ltiplas compara√ß√µes p√≥s-teste.
library(effects)   # Visualiza√ß√£o de efeitos de modelos estat√≠sticos.
library(sjstats)   # Estat√≠sticas descritivas e sumariza√ß√£o de modelos.
library(tm)        # An√°lise de texto e minera√ß√£o de texto.
library(car)       # An√°lise de regress√£o e diagn√≥stico de regress√£o.
library(pwr)       # C√°lculo do poder estat√≠stico em estudos de amostragem.
library(rstatix)   # An√°lise estat√≠stica simplificada.
library(geepack)   # Ajuste de modelos de equa√ß√µes de estima√ß√£o generalizadas.
library(htmltools) # Ferramentas para trabalhar com HTML.
library(mime)      # Ferramentas para manipula√ß√£o de tipos MIME.
library(performance) # Avalia√ß√£o e melhoria do desempenho do modelo linear
library(see) # Simplificar a explora√ß√£o de dados
library(rempsyc) # M√©todos psicom√©tricos e estat√≠sticas relacionadas √† psicometria
library(easystats) # Simplifica a an√°lise estat√≠stica
library(GGally)
library(gee)
library(tweedie)
library(stats)
library(statmod)
library(fitdistrplus)
library(survey)

```

Na lista 2 vamos utilizar mais uma vez o banco de dados [New Drug](https://drive.google.com/file/d/145uyQOn_3Mk_CQxpu-pFKfm8u7DE257U/view?usp=sharing) com medidas de resp e pulse. N√£o se esque√ßa de transform√°-lo para o formato long como no exerc√≠cio anterior.

```{r}
#| echo: true
#| warning: false
#| message: false 
# Carregar o banco de dados e armazena na vari√°vel original_wide

original_wide = read.spss("bd_New drug_respiratory&pulse.sav", to.data.frame=TRUE) 



```

```{r}
#| echo: true
#| warning: false
#| message: false 

# Renomear as colunas do banco de dados para facilitar a convers√£o para o formato longo.

bd <- original_wide %>%   rename_with(~gsub("(resp|pulse)(\\d+)", "\\1_\\2", .), -drug) %>%  mutate(ID = row_number()) %>% dplyr::select(ID, everything())  
```

```{r}
#| echo: true
#| warning: false
#| message: false 

# Organizar os dados para o formato longo

bd_long = pivot_longer(bd, cols=resp_1:pulse_3, names_to = c(".value", "Tempo"),   names_pattern = "(.+)_(.+)")  
```

Primeiras linhas do banco de dados depois de transformado.

```{r}
#| echo: true
#| warning: false
#| message: false 
head(bd_long)
```

------------------------------------------------------------------------

## Exerc√≠cios

### a) GEE com a VD "Pulse"

Utilize um GEE para verificar o efeito de tempo e grupo sobre os resultados de resp e pulse. Fa√ßa 3 modelos para cada vari√°vel dependente (com as distribui√ß√µes Normal, Gamma e Tweedie) e cole aqui apenas as tabelas relevantes para a an√°lise.

#### **Distribui√ß√£o normal**

##### Criando o modelo

```{r}
#| echo: true
#| message: false
#| warning: false
modelo_gee_pulse_normal <- geeglm(pulse ~ drug + Tempo + drug*Tempo, 
                           data = bd_long,         
                           id = ID,                 
                           family = gaussian, #Distribui√ß√£o normal      
                           corstr = "unstructured")
```

##### Resumo do modelo e contrastes

```{r}
summary(modelo_gee_pulse_normal)
emmeans(modelo_gee_pulse_normal, pairwise ~ drug*Tempo)

```

##### Verificando os pressupostos

```{r}
# Plotar o diagn√≥stico do modelo GEE para a vari√°vel 'pulse'

check_model(modelo_gee_pulse_normal)
```

##### Plot dos resultados

```{r}
#| echo: true
#| message: false
#| warning: false

# Salvando os resultados do modelo em uma vari√°vel

means_ci_normal = emmeans(modelo_gee_pulse_normal, specs = ~drug:Tempo)
```

```{r}
#| echo: true
#| message: false
#| warning: false
# Plotar as m√©dias e intervalos de confian√ßa

ggplot(as.data.frame(means_ci_normal), aes(x = Tempo, y = emmean, color = drug)) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width = 0.2, position = position_dodge(0.8)) +
  geom_point(position = position_dodge(0.8), size = 3) +
  labs(title = "Distribui√ß√£o Normal",
       x = "Tempo",
       y = "Pulse") +
  theme_minimal()
```

------------------------------------------------------------------------

#### **Distribui√ß√£o gamma**

##### Criando o modelo

```{r}
#| echo: true
#| message: false
#| warning: false
modelo_gee_pulse_gamma <- geeglm(pulse ~ drug + Tempo + drug*Tempo, 
                           data = bd_long,         
                           id = ID,                 
                           family = Gamma(link = "identity"), #Distribui√ß√£o Gamma      
                           corstr = "unstructured")
```

##### Resumo do modelo e contrastes

```{r}
summary(modelo_gee_pulse_gamma)
emmeans(modelo_gee_pulse_gamma, pairwise ~ drug*Tempo)
```

##### Verificando os pressupostos

```{r}
# Plotar o diagn√≥stico do modelo GEE para a vari√°vel 'pulse'

check_model(modelo_gee_pulse_gamma)
```

##### Plot dos resultados

```{r}
#| echo: true
#| message: false
#| warning: false
# Salvando os resultados do modelo em uma vari√°vel

means_ci_gamma = emmeans(modelo_gee_pulse_gamma, specs = ~drug:Tempo)
```

```{r}
#| echo: true
#| message: false
#| warning: false
# Plotar as m√©dias e intervalos de confian√ßa

ggplot(as.data.frame(means_ci_gamma), aes(x = Tempo, y = emmean, color = drug)) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width = 0.2, position = position_dodge(0.8)) +
  geom_point(position = position_dodge(0.8), size = 3) +
  labs(title = "Distribui√ß√£o Gamma",
       x = "Tempo",
       y = "Pulse") +
  theme_minimal()
```

------------------------------------------------------------------------

#### **Distribui√ß√£o tweedie**

##### Criando o modelo

```{r}
#| echo: true
#| message: false
#| warning: false
modelo_gee_pulse_tweedie <- glm(pulse ~ drug + Tempo + drug*Tempo, 
                           data = bd_long,
                          # id = ID, 
                           family = tweedie(var.power=2, link.power = 0),
                          contrasts = )
```

::: callout-warning
#### Aviso!

Utilizamos a fun√ß√£o glm para criar o modelo Tweedie. Estamos trabalhando para criar o modelo com a fun√ß√£o GEE. Por hora utilize o SPSSü§Æ.
:::

<!-- ```{r} outra maneira de fazer o modelo tweedie-->

<!-- #| echo: true -->

<!-- #| message: false -->

<!-- #| warning: false -->

<!-- mepsdsgn = svydesign( -->

<!--   id = ~ID, -->

<!--   strata = ~drug, -->

<!--   #weights = ~perwt20f, -->

<!--   data = bd_long, -->

<!--   nest = TRUE) -->

<!-- modelo_gee_pulse_tweedie2 <- svyglm(pulse ~ drug + Tempo + drug*Tempo,  -->

<!--                            mepsdsgn, -->

<!--                           # id = ID,  -->

<!--                            family = tweedie(var.power=2, link.power = 0)) -->

<!-- ``` -->

##### Resumo do modelo e contrastes

```{r}
summary(modelo_gee_pulse_tweedie)
emmeans(modelo_gee_pulse_tweedie, pairwise ~ drug*Tempo)

```

##### Verificando os pressupostos

```{r}
# Plotar o diagn√≥stico do modelo GEE para a vari√°vel 'pulse'

check_model(modelo_gee_pulse_tweedie)
```

##### Plot dos resultados

```{r}
#| echo: true
#| message: false
#| warning: false

# Salvando os resultados do modelo em uma vari√°vel

means_ci_tweedie = emmeans(modelo_gee_pulse_tweedie, specs = ~drug:Tempo)
```

```{r}
#| echo: true
#| message: false
#| warning: false
# Plotar as m√©dias e intervalos de confian√ßa

ggplot(as.data.frame(means_ci_tweedie), aes(x = Tempo, y = emmean, color = drug)) +
  geom_errorbar(aes(ymin = asymp.LCL, ymax = asymp.UCL), width = 0.2, position = position_dodge(0.8)) +
  geom_point(position = position_dodge(0.8), size = 3) +
  labs(title = "Distribui√ß√£o Tweedie",
       x = "Tempo",
       y = "Pulse") +
  theme_minimal()
```

------------------------------------------------------------------------

### b) QIC

Compare cada um dos modelos com diferentes distribui√ß√µes utilizando o QIC (Quasi Likehood Independence Criterion). Os modelos t√™m diferen√ßa entre si nos resultados?

::: callout-note
#### Nota

A fun√ß√£o `QIC()` n√£o funciona para modelos gerados com as fun√ß√µes glm e lm, apenas com o GEE. Resolveremos em breve! Por hora utilize o SPSSü§Æ.
:::

```{r}
QIC(modelo_gee_pulse_normal)
QIC(modelo_gee_pulse_gamma)
#QIC(modelo_gee_pulse_tweedie)
```

### c) Sumarizando os resultados

::: callout-note
#### Nota

A fun√ß√£o `report()` n√£o funciona para modelos gerados com as fun√ß√µes GEE. Aproveite para treinar a escrita no formato de uma publica√ß√£o acad√™mica.
:::

#### Resutados com distribui√ß√£o Tweedie

```{r}
report(modelo_gee_pulse_tweedie)
```

## Considera√ß√µes finais

Realizamos todas as an√°lises para a VD Pulse! Agora fa√ßa as an√°lises para a vari√°vel Reps!

::: callout-tip
#### Dica!

N√£o fa√ßa apenas um copy/paste dos scripts! Treine escrever os c√≥digos e lembre-se de mudar o nome das vari√°veis do modelo para que n√£o ocorra nenhum conflito! Compare seus resultados com os da aula pr√°tica.
:::

## Lista 2 resolvida no SPSS

{{< video https://www.youtube.com/watch?v=qd0qF2lRqIs title='GEE - Generalized Estimated Equations - Aula Pr√°tica #2 (SPSS)' >}}

## Refer√™ncias


## Vers√µes dos pacotes

```{r}
report(sessionInfo())
```
